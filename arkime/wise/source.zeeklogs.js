'use strict';

const WISESource = require('./wiseSource.js');

//////////////////////////////////////////////////////////////////////////////////
// Arkime WISE Data Source definition for Malcolm data sources
//
// Part of Malcolm (https://github.com/idaholab/malcolm)
//
// Data may be populated with Malcolm's Logstash filters:
//   (https://github.com/idaholab/Malcolm/tree/main/logstash/pipelines)
//
// Copyright (c) 2022 Battelle Energy Alliance, LLC.  All rights reserved.
// see https://raw.githubusercontent.com/idaholab/Malcolm/main/License.txt
//////////////////////////////////////////////////////////////////////////////////

class MalcolmSource extends WISESource {
  // ----------------------------------------------------------------------------
  constructor (api, section) {
    super(api, section, { dontCache: true });

    this.api.addSource('malcolm', this, []);

    // there are several files where the definitions of fields live: make sure to keep them in sync
    // - source.malcolm.js (this file)
    // - Arkime's config.ini
    // - Opensearch Dashboards's malcolm_template.json

    // todo: look at expressions for things that have parents (tunnelling, parent files, etc.)
    // todo: look at IP types and use ipPrint?

    // add right-clicks
    var allFields = [
      "malcolmDocId",
      "client.bytes",
      "client.domain",
      "destination.as.full",
      "destination.bytes",
      "destination.domain",
      "destination.geo.city_name",
      "destination.geo.country_iso_code",
      "destination.geo.country_name",
      "destination.geo.ip",
      "destination.hostname",
      "destination.ip",
      "destination.ip_reverse_dns",
      "destination.mac",
      "destination.oui",
      "destination.packets",
      "destination.port",
      "destination.segment",
      "dns.answers",
      "dns.header_flags",
      "dns.id",
      "dns.op_code",
      "dns.question.class",
      "dns.question.name",
      "dns.question.type",
      "dns.resolved_ip",
      "dns.response_code",
      "dns.type",
      "ecs.version",
      "event.action",
      "event.category",
      "event.dataset",
      "event.duration",
      "event.end",
      "event.freq_score_v1",
      "event.freq_score_v2",
      "event.hits",
      "event.id",
      "event.ingested",
      "event.kind",
      "event.outcome",
      "event.provider",
      "event.result",
      "event.risk_score",
      "event.risk_score_norm",
      "event.severity",
      "event.severity_tags",
      "event.start",
      "file.accessed",
      "file.created",
      "file.ctime",
      "file.directory",
      "file.extension",
      "file.hash.md5",
      "file.hash.sha1",
      "file.hash.sha256",
      "file.mime_type",
      "file.mtime",
      "file.name",
      "file.path",
      "file.size",
      "file.type",
      "host.name",
      "http.request.body.bytes",
      "http.request.method",
      "http.request.mime_type",
      "http.request.referrer",
      "http.response.body.bytes",
      "http.response.mime_type",
      "http.response.status_code",
      "http.version",
      "ip.protocol",
      "mac.dst",
      "mac.src",
      "network.application",
      "network.bytes",
      "network.community_id",
      "network.direction",
      "network.iana_number",
      "network.inner.vlan.id",
      "network.name",
      "network.packets",
      "network.protocol",
      "network.protocol_version",
      "network.transport",
      "network.type",
      "network.vlan.id",
      "node",
      "oui.dst",
      "oui.src",
      "protocols",
      "related.hash",
      "related.hosts",
      "related.ip",
      "related.mac",
      "related.oui",
      "related.password",
      "related.user",
      "rootId",
      "rule.author",
      "rule.category",
      "rule.description",
      "rule.license",
      "rule.name",
      "rule.reference",
      "rule.ruleset",
      "server.bytes",
      "server.domain",
      "source.as.full",
      "source.bytes",
      "source.geo.city_name",
      "source.geo.country_iso_code",
      "source.geo.country_name",
      "source.geo.ip",
      "source.hostname",
      "source.ip",
      "source.ip_reverse_dns",
      "source.mac",
      "source.nat.ip",
      "source.nat.port",
      "source.oui",
      "source.packets",
      "source.port",
      "source.segment",
      "tags",
      "threat.framework",
      "threat.tactic.id",
      "threat.tactic.name",
      "threat.tactic.reference",
      "threat.technique.id",
      "threat.technique.name",
      "threat.technique.reference",
      "tls.cipher",
      "tls.client.issuer",
      "tls.client.ja3",
      "tls.client.ja3_description",
      "tls.client.server_name",
      "tls.client.subject",
      "tls.curve",
      "tls.established",
      "tls.next_protocol",
      "tls.resumed",
      "tls.server.issuer",
      "tls.server.ja3s",
      "tls.server.ja3s_description",
      "tls.server.subject",
      "tls.version",
      "tls.version_protocol",
      "url.domain",
      "url.extension",
      "url.fragment",
      "url.full",
      "url.original",
      "url.password",
      "url.path",
      "url.port",
      "url.query",
      "url.scheme",
      "url.user",
      "user_agent.original",
      "vulnerability.category",
      "vulnerability.description",
      "vulnerability.reference",
      "vulnerability.scanner.vendor",
      "zeek.bacnet.bvlc_function",
      "zeek.bacnet.invoke_id",
      "zeek.bacnet.pdu_service",
      "zeek.bacnet.pdu_type",
      "zeek.bacnet.result_code",
      "zeek.bacnet_discovery.instance_number",
      "zeek.bacnet_discovery.object_name",
      "zeek.bacnet_discovery.object_type",
      "zeek.bacnet_discovery.pdu_service",
      "zeek.bacnet_discovery.range",
      "zeek.bacnet_discovery.range_high",
      "zeek.bacnet_discovery.range_low",
      "zeek.bacnet_discovery.vendor",
      "zeek.bacnet_property.array_index",
      "zeek.bacnet_property.instance_number",
      "zeek.bacnet_property.object_type",
      "zeek.bacnet_property.pdu_service",
      "zeek.bacnet_property.property",
      "zeek.bacnet_property.value",
      "zeek.bestguess.category",
      "zeek.bestguess.name",
      "zeek.bsap_ip_header.num_msg",
      "zeek.bsap_ip_header.type_name",
      "zeek.bsap_ip_rdb.app_func_code",
      "zeek.bsap_ip_rdb.data",
      "zeek.bsap_ip_rdb.data_len",
      "zeek.bsap_ip_rdb.func_code",
      "zeek.bsap_ip_rdb.header_size",
      "zeek.bsap_ip_rdb.mes_seq",
      "zeek.bsap_ip_rdb.node_status",
      "zeek.bsap_ip_rdb.res_seq",
      "zeek.bsap_ip_rdb.sequence",
      "zeek.bsap_ip_unknown.data",
      "zeek.bsap_serial_header.ctl",
      "zeek.bsap_serial_header.dadd",
      "zeek.bsap_serial_header.dfun",
      "zeek.bsap_serial_header.nsb",
      "zeek.bsap_serial_header.sadd",
      "zeek.bsap_serial_header.seq",
      "zeek.bsap_serial_header.ser",
      "zeek.bsap_serial_header.sfun",
      "zeek.bsap_serial_header.type_name",
      "zeek.bsap_serial_rdb.data",
      "zeek.bsap_serial_rdb.func_code",
      "zeek.bsap_serial_rdb_ext.data",
      "zeek.bsap_serial_rdb_ext.dfun",
      "zeek.bsap_serial_rdb_ext.extfun",
      "zeek.bsap_serial_rdb_ext.nsb",
      "zeek.bsap_serial_rdb_ext.seq",
      "zeek.bsap_serial_rdb_ext.sfun",
      "zeek.bsap_serial_unknown.data",
      "zeek.cip.attribute_id",
      "zeek.cip.cip_sequence_count",
      "zeek.cip.cip_service",
      "zeek.cip.cip_service_code",
      "zeek.cip.cip_status",
      "zeek.cip.class_id",
      "zeek.cip.class_name",
      "zeek.cip.direction",
      "zeek.cip.instance_id",
      "zeek.cip_identity.device_state",
      "zeek.cip_identity.device_status",
      "zeek.cip_identity.device_type_id",
      "zeek.cip_identity.device_type_name",
      "zeek.cip_identity.encapsulation_version",
      "zeek.cip_identity.product_code",
      "zeek.cip_identity.product_name",
      "zeek.cip_identity.revision",
      "zeek.cip_identity.serial_number",
      "zeek.cip_identity.socket_address",
      "zeek.cip_identity.socket_address_asn",
      "zeek.cip_identity.socket_address_geo.city_name",
      "zeek.cip_identity.socket_address_geo.country_name",
      "zeek.cip_identity.socket_port",
      "zeek.cip_identity.vendor_id",
      "zeek.cip_identity.vendor_name",
      "zeek.cip_io.connection_id",
      "zeek.cip_io.data_length",
      "zeek.cip_io.io_data",
      "zeek.cip_io.sequence_number",
      "zeek.conn.conn_state",
      "zeek.conn.conn_state_description",
      "zeek.conn.duration",
      "zeek.conn.history",
      "zeek.conn.inner_vlan",
      "zeek.conn.local_orig",
      "zeek.conn.local_resp",
      "zeek.conn.missed_bytes",
      "zeek.conn.orig_bytes",
      "zeek.conn.orig_ip_bytes",
      "zeek.conn.orig_pkts",
      "zeek.conn.resp_bytes",
      "zeek.conn.resp_ip_bytes",
      "zeek.conn.resp_pkts",
      "zeek.conn.tunnel_parents",
      "zeek.conn.vlan",
      "zeek.dce_rpc.endpoint",
      "zeek.dce_rpc.named_pipe",
      "zeek.dce_rpc.operation",
      "zeek.dce_rpc.rtt",
      "zeek.dhcp.assigned_ip",
      "zeek.dhcp.client_fqdn",
      "zeek.dhcp.client_message",
      "zeek.dhcp.client_software",
      "zeek.dhcp.domain",
      "zeek.dhcp.duration",
      "zeek.dhcp.host_name",
      "zeek.dhcp.lease_time",
      "zeek.dhcp.mac",
      "zeek.dhcp.msg_types",
      "zeek.dhcp.requested_ip",
      "zeek.dhcp.server_message",
      "zeek.dhcp.server_software",
      "zeek.dhcp.trans_id",
      "zeek.dnp3.fc_reply",
      "zeek.dnp3.fc_request",
      "zeek.dnp3.iin",
      "zeek.dnp3.iin_flags",
      "zeek.dnp3_control.block_type",
      "zeek.dnp3_control.execute_count",
      "zeek.dnp3_control.function_code",
      "zeek.dnp3_control.index_number",
      "zeek.dnp3_control.off_time",
      "zeek.dnp3_control.on_time",
      "zeek.dnp3_control.operation_type",
      "zeek.dnp3_control.status_code",
      "zeek.dnp3_control.trip_control_code",
      "zeek.dnp3_objects.function_code",
      "zeek.dnp3_objects.object_count",
      "zeek.dnp3_objects.object_type",
      "zeek.dnp3_objects.range_high",
      "zeek.dnp3_objects.range_low",
      "zeek.dns.AA",
      "zeek.dns.answers",
      "zeek.dns.qclass",
      "zeek.dns.qclass_name",
      "zeek.dns.qtype",
      "zeek.dns.qtype_name",
      "zeek.dns.query",
      "zeek.dns.RA",
      "zeek.dns.rcode",
      "zeek.dns.rcode_name",
      "zeek.dns.RD",
      "zeek.dns.rejected",
      "zeek.dns.rtt",
      "zeek.dns.TC",
      "zeek.dns.trans_id",
      "zeek.dns.TTLs",
      "zeek.dns.Z",
      "zeek.dpd.failure_reason",
      "zeek.dpd.service",
      "zeek.ecat_aoe_info.command",
      "zeek.ecat_aoe_info.data",
      "zeek.ecat_aoe_info.orig_port",
      "zeek.ecat_aoe_info.resp_port",
      "zeek.ecat_aoe_info.state",
      "zeek.ecat_arp_info.arp_type",
      "zeek.ecat_arp_info.orig_hw_addr",
      "zeek.ecat_arp_info.orig_proto_addr",
      "zeek.ecat_arp_info.resp_hw_addr",
      "zeek.ecat_arp_info.resp_proto_addr",
      "zeek.ecat_coe_info.dataoffset",
      "zeek.ecat_coe_info.index",
      "zeek.ecat_coe_info.number",
      "zeek.ecat_coe_info.req_resp",
      "zeek.ecat_coe_info.subindex",
      "zeek.ecat_coe_info.type",
      "zeek.ecat_dev_info.build",
      "zeek.ecat_dev_info.dev_type",
      "zeek.ecat_dev_info.dpram",
      "zeek.ecat_dev_info.features",
      "zeek.ecat_dev_info.fmmucnt",
      "zeek.ecat_dev_info.ports",
      "zeek.ecat_dev_info.revision",
      "zeek.ecat_dev_info.server_id",
      "zeek.ecat_dev_info.smcount",
      "zeek.ecat_foe_info.data",
      "zeek.ecat_foe_info.error_code",
      "zeek.ecat_foe_info.filename",
      "zeek.ecat_foe_info.opcode",
      "zeek.ecat_foe_info.packet_num",
      "zeek.ecat_foe_info.reserved",
      "zeek.ecat_log_address.command",
      "zeek.ecat_log_address.data",
      "zeek.ecat_log_address.length",
      "zeek.ecat_log_address.log_addr",
      "zeek.ecat_registers.command",
      "zeek.ecat_registers.data",
      "zeek.ecat_registers.register_addr",
      "zeek.ecat_registers.register_type",
      "zeek.ecat_registers.server_addr",
      "zeek.ecat_soe_info.drive_num",
      "zeek.ecat_soe_info.element",
      "zeek.ecat_soe_info.error",
      "zeek.ecat_soe_info.incomplete",
      "zeek.ecat_soe_info.index",
      "zeek.ecat_soe_info.opcode",
      "zeek.enip.enip_command",
      "zeek.enip.enip_command_code",
      "zeek.enip.enip_status",
      "zeek.enip.length",
      "zeek.enip.options",
      "zeek.enip.sender_context",
      "zeek.enip.session_handle",
      "zeek.files.analyzers",
      "zeek.files.conn_uids",
      "zeek.files.depth",
      "zeek.files.duration",
      "zeek.files.extracted",
      "zeek.files.extracted_cutoff",
      "zeek.files.extracted_size",
      "zeek.files.filename",
      "zeek.files.ftime",
      "zeek.files.is_orig",
      "zeek.files.local_orig",
      "zeek.files.md5",
      "zeek.files.mime_type",
      "zeek.files.missing_bytes",
      "zeek.files.overflow_bytes",
      "zeek.files.parent_fuid",
      "zeek.files.rx_hosts",
      "zeek.files.seen_bytes",
      "zeek.files.sha1",
      "zeek.files.sha256",
      "zeek.files.source",
      "zeek.files.timedout",
      "zeek.files.total_bytes",
      "zeek.files.tx_hosts",
      "zeek.ftp.arg",
      "zeek.ftp.command",
      "zeek.ftp.data_channel_orig_h",
      "zeek.ftp.data_channel_passive",
      "zeek.ftp.data_channel_resp_h",
      "zeek.ftp.data_channel_resp_p",
      "zeek.ftp.file_size",
      "zeek.ftp.mime_type",
      "zeek.ftp.reply_code",
      "zeek.ftp.reply_msg",
      "zeek.fuid",
      "zeek.gquic.cyu",
      "zeek.gquic.cyutags",
      "zeek.gquic.server_name",
      "zeek.gquic.tag_count",
      "zeek.gquic.user_agent",
      "zeek.gquic.version",
      "zeek.http.host",
      "zeek.http.info_code",
      "zeek.http.info_msg",
      "zeek.http.method",
      "zeek.http.orig_filenames",
      "zeek.http.orig_fuids",
      "zeek.http.orig_mime_types",
      "zeek.http.origin",
      "zeek.http.post_password_plain",
      "zeek.http.post_username",
      "zeek.http.proxied",
      "zeek.http.referrer",
      "zeek.http.request_body_len",
      "zeek.http.resp_filenames",
      "zeek.http.resp_fuids",
      "zeek.http.resp_mime_types",
      "zeek.http.response_body_len",
      "zeek.http.status_code",
      "zeek.http.status_msg",
      "zeek.http.tags",
      "zeek.http.trans_depth",
      "zeek.http.uri",
      "zeek.http.user_agent",
      "zeek.http.version",
      "zeek.intel.cif_tags",
      "zeek.intel.cif_confidence",
      "zeek.intel.cif_source",
      "zeek.intel.cif_description",
      "zeek.intel.cif_firstseen",
      "zeek.intel.cif_lastseen",
      "zeek.intel.file_description",
      "zeek.intel.file_mime_type",
      "zeek.intel.seen_indicator",
      "zeek.intel.seen_indicator_type",
      "zeek.intel.matched",
      "zeek.intel.seen_node",
      "zeek.intel.seen_where",
      "zeek.intel.sources",
      "zeek.ipsec.certificates",
      "zeek.ipsec.exchange_type",
      "zeek.ipsec.flag_a",
      "zeek.ipsec.flag_c",
      "zeek.ipsec.flag_e",
      "zeek.ipsec.flag_i",
      "zeek.ipsec.flag_r",
      "zeek.ipsec.flag_v",
      "zeek.ipsec.flags",
      "zeek.ipsec.hash",
      "zeek.ipsec.initiator_spi",
      "zeek.ipsec.is_orig",
      "zeek.ipsec.ke_dh_groups",
      "zeek.ipsec.length",
      "zeek.ipsec.maj_ver",
      "zeek.ipsec.message_id",
      "zeek.ipsec.min_ver",
      "zeek.ipsec.notify_messages",
      "zeek.ipsec.proposals",
      "zeek.ipsec.responder_spi",
      "zeek.ipsec.transform_attributes",
      "zeek.ipsec.transforms",
      "zeek.ipsec.vendor_ids",
      "zeek.irc.addl",
      "zeek.irc.command",
      "zeek.irc.dcc_file_name",
      "zeek.irc.dcc_file_size",
      "zeek.irc.dcc_mime_type",
      "zeek.irc.nick",
      "zeek.irc.value",
      "zeek.iso_cotp.pdu_type",
      "zeek.kerberos.cipher",
      "zeek.kerberos.client_cert_fuid",
      "zeek.kerberos.client_cert_subject",
      "zeek.kerberos.cname",
      "zeek.kerberos.error_msg",
      "zeek.kerberos.forwardable",
      "zeek.kerberos.from",
      "zeek.kerberos.renewable",
      "zeek.kerberos.request_type",
      "zeek.kerberos.server_cert_fuid",
      "zeek.kerberos.server_cert_subject",
      "zeek.kerberos.sname",
      "zeek.kerberos.success",
      "zeek.kerberos.till",
      "zeek.known_certs.issuer_subject",
      "zeek.known_certs.serial",
      "zeek.known_certs.subject",
      "zeek.known_modbus.device_type",
      "zeek.ldap.argument",
      "zeek.ldap.message_id",
      "zeek.ldap.object",
      "zeek.ldap.operation",
      "zeek.ldap.result_code",
      "zeek.ldap.result_message",
      "zeek.ldap.version",
      "zeek.ldap_search.attributes",
      "zeek.ldap_search.base_object",
      "zeek.ldap_search.deref",
      "zeek.ldap_search.filter",
      "zeek.ldap_search.message_id",
      "zeek.ldap_search.result_code",
      "zeek.ldap_search.result_count",
      "zeek.ldap_search.result_message",
      "zeek.ldap_search.scope",
      "zeek.login.client_user",
      "zeek.login.confused",
      "zeek.login.success",
      "zeek.modbus.exception",
      "zeek.modbus.func",
      "zeek.modbus_detailed.address",
      "zeek.modbus_detailed.func",
      "zeek.modbus_detailed.network_direction",
      "zeek.modbus_detailed.quantity",
      "zeek.modbus_detailed.unit_id",
      "zeek.modbus_detailed.values",
      "zeek.modbus_mask_write_register.address",
      "zeek.modbus_mask_write_register.and_mask",
      "zeek.modbus_mask_write_register.func",
      "zeek.modbus_mask_write_register.network_direction",
      "zeek.modbus_mask_write_register.or_mask",
      "zeek.modbus_mask_write_register.unit_id",
      "zeek.modbus_read_write_multiple_registers.func",
      "zeek.modbus_read_write_multiple_registers.network_direction",
      "zeek.modbus_read_write_multiple_registers.read_quantity",
      "zeek.modbus_read_write_multiple_registers.read_registers",
      "zeek.modbus_read_write_multiple_registers.read_start_address",
      "zeek.modbus_read_write_multiple_registers.unit_id",
      "zeek.modbus_read_write_multiple_registers.write_registers",
      "zeek.modbus_read_write_multiple_registers.write_start_address",
      "zeek.mqtt_connect.client_id",
      "zeek.mqtt_connect.connect_status",
      "zeek.mqtt_connect.proto_name",
      "zeek.mqtt_connect.proto_version",
      "zeek.mqtt_connect.will_payload",
      "zeek.mqtt_connect.will_topic",
      "zeek.mqtt_publish.from_client",
      "zeek.mqtt_publish.payload",
      "zeek.mqtt_publish.payload_dict.messageType",
      "zeek.mqtt_publish.payload_len",
      "zeek.mqtt_publish.qos",
      "zeek.mqtt_publish.retain",
      "zeek.mqtt_publish.status",
      "zeek.mqtt_publish.topic",
      "zeek.mqtt_subscribe.ack",
      "zeek.mqtt_subscribe.action",
      "zeek.mqtt_subscribe.granted_qos_level",
      "zeek.mqtt_subscribe.qos_levels",
      "zeek.mqtt_subscribe.topics",
      "zeek.mysql.arg",
      "zeek.mysql.cmd",
      "zeek.mysql.response",
      "zeek.mysql.rows",
      "zeek.mysql.success",
      "zeek.notice.actions",
      "zeek.notice.category",
      "zeek.notice.dropped",
      "zeek.notice.dst",
      "zeek.notice.file_desc",
      "zeek.notice.file_mime_type",
      "zeek.notice.msg",
      "zeek.notice.n",
      "zeek.notice.note",
      "zeek.notice.p",
      "zeek.notice.peer_descr",
      "zeek.notice.remote_location_city",
      "zeek.notice.remote_location_country_code",
      "zeek.notice.remote_location_latitude",
      "zeek.notice.remote_location_longitude",
      "zeek.notice.remote_location_region",
      "zeek.notice.src",
      "zeek.notice.sub",
      "zeek.notice.sub_category",
      "zeek.notice.suppress_for",
      "zeek.ntlm.domain",
      "zeek.ntlm.host",
      "zeek.ntlm.server_dns_computer",
      "zeek.ntlm.server_nb_computer",
      "zeek.ntlm.server_tree",
      "zeek.ntlm.status",
      "zeek.ntlm.success",
      "zeek.ntp.mode",
      "zeek.ntp.mode_str",
      "zeek.ntp.num_exts",
      "zeek.ntp.org_time",
      "zeek.ntp.poll",
      "zeek.ntp.precision",
      "zeek.ntp.rec_time",
      "zeek.ntp.ref_id",
      "zeek.ntp.ref_time",
      "zeek.ntp.root_delay",
      "zeek.ntp.root_disp",
      "zeek.ntp.stratum",
      "zeek.ntp.version",
      "zeek.ntp.xmt_time",
      "zeek.ocsp.certStatus",
      "zeek.ocsp.hashAlgorithm",
      "zeek.ocsp.issuerKeyHash",
      "zeek.ocsp.issuerNameHash",
      "zeek.ocsp.nextUpdate",
      "zeek.ocsp.revokereason",
      "zeek.ocsp.revoketime",
      "zeek.opcua_binary.encoding_mask",
      "zeek.opcua_binary.endpoint_url",
      "zeek.opcua_binary.error",
      "zeek.opcua_binary.identifier",
      "zeek.opcua_binary.identifier_str",
      "zeek.opcua_binary.is_final",
      "zeek.opcua_binary.max_chunk_cnt",
      "zeek.opcua_binary.max_msg_size",
      "zeek.opcua_binary.msg_size",
      "zeek.opcua_binary.msg_type",
      "zeek.opcua_binary.namespace_idx",
      "zeek.opcua_binary.opcua_id",
      "zeek.opcua_binary.rcv_buf_size",
      "zeek.opcua_binary.rcv_cert",
      "zeek.opcua_binary.rcv_cert_len",
      "zeek.opcua_binary.reason",
      "zeek.opcua_binary.req_hdr_add_hdr_enc_mask",
      "zeek.opcua_binary.req_hdr_add_hdr_type_id",
      "zeek.opcua_binary.req_hdr_audit_entry_id",
      "zeek.opcua_binary.req_hdr_node_id_guid",
      "zeek.opcua_binary.req_hdr_node_id_namespace_idx",
      "zeek.opcua_binary.req_hdr_node_id_numeric",
      "zeek.opcua_binary.req_hdr_node_id_opaque",
      "zeek.opcua_binary.req_hdr_node_id_string",
      "zeek.opcua_binary.req_hdr_node_id_type",
      "zeek.opcua_binary.req_hdr_request_handle",
      "zeek.opcua_binary.req_hdr_return_diag",
      "zeek.opcua_binary.req_hdr_timeout_hint",
      "zeek.opcua_binary.req_hdr_timestamp",
      "zeek.opcua_binary.request_id",
      "zeek.opcua_binary.res_hdr_add_hdr_enc_mask",
      "zeek.opcua_binary.res_hdr_add_hdr_type_id",
      "zeek.opcua_binary.res_hdr_request_handle",
      "zeek.opcua_binary.res_hdr_service_diag_encoding",
      "zeek.opcua_binary.res_hdr_service_result",
      "zeek.opcua_binary.res_hdr_timestamp",
      "zeek.opcua_binary.sec_channel_id",
      "zeek.opcua_binary.sec_policy_uri",
      "zeek.opcua_binary.sec_policy_uri_len",
      "zeek.opcua_binary.seq_number",
      "zeek.opcua_binary.snd_buf_size",
      "zeek.opcua_binary.snd_cert",
      "zeek.opcua_binary.snd_cert_len",
      "zeek.opcua_binary.version",
      "zeek.opcua_binary_diag_info_detail.addl_info",
      "zeek.opcua_binary_diag_info_detail.has_addl_info",
      "zeek.opcua_binary_diag_info_detail.has_inner_diag_info",
      "zeek.opcua_binary_diag_info_detail.has_inner_stat_code",
      "zeek.opcua_binary_diag_info_detail.has_locale",
      "zeek.opcua_binary_diag_info_detail.has_locale_txt",
      "zeek.opcua_binary_diag_info_detail.has_namespace_uri",
      "zeek.opcua_binary_diag_info_detail.has_symbolic_id",
      "zeek.opcua_binary_diag_info_detail.inner_diag_level",
      "zeek.opcua_binary_diag_info_detail.inner_stat_code",
      "zeek.opcua_binary_diag_info_detail.locale",
      "zeek.opcua_binary_diag_info_detail.locale_str",
      "zeek.opcua_binary_diag_info_detail.locale_txt",
      "zeek.opcua_binary_diag_info_detail.locale_txt_str",
      "zeek.opcua_binary_diag_info_detail.namespace_uri",
      "zeek.opcua_binary_diag_info_detail.namespace_uri_str",
      "zeek.opcua_binary_diag_info_detail.symbolic_id",
      "zeek.opcua_binary_diag_info_detail.symbolic_id_str",
      "zeek.opcua_binary_get_endpoints.application_type",
      "zeek.opcua_binary_get_endpoints.application_uri",
      "zeek.opcua_binary_get_endpoints.cert_size",
      "zeek.opcua_binary_get_endpoints.discovery_profile_id",
      "zeek.opcua_binary_get_endpoints.encoding_mask",
      "zeek.opcua_binary_get_endpoints.endpoint_url",
      "zeek.opcua_binary_get_endpoints.gateway_server_uri",
      "zeek.opcua_binary_get_endpoints.locale",
      "zeek.opcua_binary_get_endpoints.locale_id",
      "zeek.opcua_binary_get_endpoints.message_security_mode",
      "zeek.opcua_binary_get_endpoints.product_uri",
      "zeek.opcua_binary_get_endpoints.profile_uri",
      "zeek.opcua_binary_get_endpoints.security_level",
      "zeek.opcua_binary_get_endpoints.security_policy_uri",
      "zeek.opcua_binary_get_endpoints.server_cert",
      "zeek.opcua_binary_get_endpoints.text",
      "zeek.opcua_binary_get_endpoints.transport_profile_uri",
      "zeek.opcua_binary_get_endpoints.user_token_id",
      "zeek.opcua_binary_get_endpoints_discovery.discovery_profile_id",
      "zeek.opcua_binary_get_endpoints_discovery.discovery_profile_uri",
      "zeek.opcua_binary_get_endpoints_discovery.discovery_profile_url",
      "zeek.opcua_binary_get_endpoints_user_token.user_token_endpoint_url",
      "zeek.opcua_binary_get_endpoints_user_token.user_token_id",
      "zeek.opcua_binary_get_endpoints_user_token.user_token_issued_type",
      "zeek.opcua_binary_get_endpoints_user_token.user_token_policy_id",
      "zeek.opcua_binary_get_endpoints_user_token.user_token_sec_policy_uri",
      "zeek.opcua_binary_get_endpoints_user_token.user_token_type",
      "zeek.opcua_binary_opensecure_channel.client_nonce",
      "zeek.opcua_binary_opensecure_channel.client_proto_ver",
      "zeek.opcua_binary_opensecure_channel.message_security_mode",
      "zeek.opcua_binary_opensecure_channel.req_lifetime",
      "zeek.opcua_binary_opensecure_channel.sec_token_created_at",
      "zeek.opcua_binary_opensecure_channel.sec_token_id",
      "zeek.opcua_binary_opensecure_channel.sec_token_request_type",
      "zeek.opcua_binary_opensecure_channel.sec_token_revised_time",
      "zeek.opcua_binary_opensecure_channel.sec_token_sec_channel_id",
      "zeek.opcua_binary_opensecure_channel.server_nonce",
      "zeek.opcua_binary_opensecure_channel.server_proto_ver",
      "zeek.opcua_binary_status_code_detail.historian_bits",
      "zeek.opcua_binary_status_code_detail.historian_bits_str",
      "zeek.opcua_binary_status_code_detail.historianExtraData",
      "zeek.opcua_binary_status_code_detail.historianMultiValue",
      "zeek.opcua_binary_status_code_detail.historianPartial",
      "zeek.opcua_binary_status_code_detail.info_type",
      "zeek.opcua_binary_status_code_detail.info_type_str",
      "zeek.opcua_binary_status_code_detail.limit_bits",
      "zeek.opcua_binary_status_code_detail.limit_bits_str",
      "zeek.opcua_binary_status_code_detail.overflow",
      "zeek.opcua_binary_status_code_detail.semantics_changed",
      "zeek.opcua_binary_status_code_detail.severity",
      "zeek.opcua_binary_status_code_detail.severity_str",
      "zeek.opcua_binary_status_code_detail.source",
      "zeek.opcua_binary_status_code_detail.source_str",
      "zeek.opcua_binary_status_code_detail.status_code",
      "zeek.opcua_binary_status_code_detail.structure_changed",
      "zeek.opcua_binary_status_code_detail.sub_code",
      "zeek.opcua_binary_status_code_detail.sub_code_str",
      "zeek.ocsp.serialNumber",
      "zeek.ocsp.thisUpdate",
      "zeek.ospf.ospf_type",
      "zeek.ospf.version",
      "zeek.ospf.router_id",
      "zeek.ospf.area_id",
      "zeek.ospf.interface_id",
      "zeek.ospf.netmask",
      "zeek.ospf.desig_router",
      "zeek.ospf.backup_router",
      "zeek.ospf.neighbors",
      "zeek.ospf.lsa_type",
      "zeek.ospf.link_state_id",
      "zeek.ospf.advert_router",
      "zeek.ospf.routers",
      "zeek.ospf.link_id",
      "zeek.ospf.link_data",
      "zeek.ospf.link_type",
      "zeek.ospf.neighbor_router_id",
      "zeek.ospf.metrics",
      "zeek.ospf.fwd_addrs",
      "zeek.ospf.route_tags",
      "zeek.ospf.neighbor_interface_id",
      "zeek.ospf.prefix",
      "zeek.ospf.metric",
      "zeek.ospf.dest_router_id",
      "zeek.ospf.link_prefixes",
      "zeek.ospf.intra_prefixes",
      "zeek.pe.compile_ts",
      "zeek.pe.has_cert_table",
      "zeek.pe.has_debug_data",
      "zeek.pe.has_export_table",
      "zeek.pe.has_import_table",
      "zeek.pe.is_64bit",
      "zeek.pe.is_exe",
      "zeek.pe.machine",
      "zeek.pe.os",
      "zeek.pe.section_names",
      "zeek.pe.subsystem",
      "zeek.pe.uses_aslr",
      "zeek.pe.uses_code_integrity",
      "zeek.pe.uses_dep",
      "zeek.pe.uses_seh",
      "zeek.profinet.block_version",
      "zeek.profinet.index",
      "zeek.profinet.operation_type",
      "zeek.profinet.slot_number",
      "zeek.profinet.subslot_number",
      "zeek.profinet_dce_rpc.activity_uuid",
      "zeek.profinet_dce_rpc.interface_uuid",
      "zeek.profinet_dce_rpc.object_uuid",
      "zeek.profinet_dce_rpc.operation",
      "zeek.profinet_dce_rpc.packet_type",
      "zeek.profinet_dce_rpc.server_boot_time",
      "zeek.profinet_dce_rpc.version",
      "zeek.radius.connect_info",
      "zeek.radius.framed_addr",
      "zeek.radius.mac",
      "zeek.radius.reply_msg",
      "zeek.radius.result",
      "zeek.radius.ttl",
      "zeek.radius.tunnel_client",
      "zeek.rdp.cert_count",
      "zeek.rdp.cert_permanent",
      "zeek.rdp.cert_type",
      "zeek.rdp.client_build",
      "zeek.rdp.client_channels",
      "zeek.rdp.client_dig_product_id",
      "zeek.rdp.client_name",
      "zeek.rdp.cookie",
      "zeek.rdp.desktop_height",
      "zeek.rdp.desktop_width",
      "zeek.rdp.encryption_level",
      "zeek.rdp.encryption_method",
      "zeek.rdp.keyboard_layout",
      "zeek.rdp.requested_color_depth",
      "zeek.rdp.result",
      "zeek.rdp.security_protocol",
      "zeek.rfb.auth",
      "zeek.rfb.authentication_method",
      "zeek.rfb.client_major_version",
      "zeek.rfb.client_minor_version",
      "zeek.rfb.desktop_name",
      "zeek.rfb.height",
      "zeek.rfb.server_major_version",
      "zeek.rfb.server_minor_version",
      "zeek.rfb.share_flag",
      "zeek.rfb.width",
      "zeek.s7comm.data_info",
      "zeek.s7comm.item_count",
      "zeek.s7comm.parameter",
      "zeek.s7comm.parameters.class",
      "zeek.s7comm.parameters.code",
      "zeek.s7comm.parameters.group",
      "zeek.s7comm.parameters.mode",
      "zeek.s7comm.parameters.sub",
      "zeek.s7comm.parameters.type",
      "zeek.s7comm.rosctr",
      "zeek.signatures.engine",
      "zeek.signatures.event_message",
      "zeek.signatures.hits",
      "zeek.signatures.host_count",
      "zeek.signatures.note",
      "zeek.signatures.signature_count",
      "zeek.signatures.signature_id",
      "zeek.signatures.sub_message",
      "zeek.sip.call_id",
      "zeek.sip.content_type",
      "zeek.sip.date",
      "zeek.sip.method",
      "zeek.sip.reply_to",
      "zeek.sip.request_body_len",
      "zeek.sip.request_from",
      "zeek.sip.request_path",
      "zeek.sip.request_to",
      "zeek.sip.response_body_len",
      "zeek.sip.response_from",
      "zeek.sip.response_path",
      "zeek.sip.response_to",
      "zeek.sip.seq",
      "zeek.sip.status_code",
      "zeek.sip.status_msg",
      "zeek.sip.subject",
      "zeek.sip.trans_depth",
      "zeek.sip.uri",
      "zeek.sip.user_agent",
      "zeek.sip.version",
      "zeek.sip.warning",
      "zeek.smb_cmd.argument",
      "zeek.smb_cmd.command",
      "zeek.smb_cmd.rtt",
      "zeek.smb_cmd.status",
      "zeek.smb_cmd.sub_command",
      "zeek.smb_cmd.tree",
      "zeek.smb_cmd.tree_service",
      "zeek.smb_cmd.user",
      "zeek.smb_cmd.version",
      "zeek.smb_files.action",
      "zeek.smb_files.data_len_req",
      "zeek.smb_files.data_len_rsp",
      "zeek.smb_files.data_offset_req",
      "zeek.smb_files.name",
      "zeek.smb_files.path",
      "zeek.smb_files.prev_name",
      "zeek.smb_files.size",
      "zeek.smb_files.times_accessed",
      "zeek.smb_files.times_changed",
      "zeek.smb_files.times_created",
      "zeek.smb_files.times_modified",
      "zeek.smb_mapping.native_file_system",
      "zeek.smb_mapping.path",
      "zeek.smb_mapping.resource_type",
      "zeek.smb_mapping.share_type",
      "zeek.smtp.cc",
      "zeek.smtp.date",
      "zeek.smtp.first_received",
      "zeek.smtp.from",
      "zeek.smtp.helo",
      "zeek.smtp.in_reply_to",
      "zeek.smtp.is_webmail",
      "zeek.smtp.last_reply",
      "zeek.smtp.last_reply_code",
      "zeek.smtp.last_reply_msg",
      "zeek.smtp.mailfrom",
      "zeek.smtp.msg_id",
      "zeek.smtp.path",
      "zeek.smtp.rcptto",
      "zeek.smtp.reply_to",
      "zeek.smtp.second_received",
      "zeek.smtp.subject",
      "zeek.smtp.tls",
      "zeek.smtp.to",
      "zeek.smtp.trans_depth",
      "zeek.smtp.user_agent",
      "zeek.smtp.x_originating_ip",
      "zeek.snmp.community",
      "zeek.snmp.display_string",
      "zeek.snmp.duration",
      "zeek.snmp.get_bulk_requests",
      "zeek.snmp.get_requests",
      "zeek.snmp.get_responses",
      "zeek.snmp.set_requests",
      "zeek.snmp.up_since",
      "zeek.snmp.version",
      "zeek.socks.bound_host",
      "zeek.socks.bound_name",
      "zeek.socks.bound_port",
      "zeek.socks.request_host",
      "zeek.socks.request_name",
      "zeek.socks.request_port",
      "zeek.socks.server_status",
      "zeek.socks.version",
      "zeek.software.name",
      "zeek.software.software_type",
      "zeek.software.unparsed_version",
      "zeek.software.version_addl",
      "zeek.software.version_major",
      "zeek.software.version_minor",
      "zeek.software.version_minor2",
      "zeek.software.version_minor3",
      "zeek.ssh.auth_attempts",
      "zeek.ssh.auth_success",
      "zeek.ssh.cipher_alg",
      "zeek.ssh.client",
      "zeek.ssh.compression_alg",
      "zeek.ssh.cshka",
      "zeek.ssh.direction",
      "zeek.ssh.hassh",
      "zeek.ssh.hasshAlgorithms",
      "zeek.ssh.hasshServer",
      "zeek.ssh.hasshServerAlgorithms",
      "zeek.ssh.hasshVersion",
      "zeek.ssh.host_key",
      "zeek.ssh.host_key_alg",
      "zeek.ssh.kex_alg",
      "zeek.ssh.mac_alg",
      "zeek.ssh.remote_location_city",
      "zeek.ssh.remote_location_country_code",
      "zeek.ssh.remote_location_latitude",
      "zeek.ssh.remote_location_longitude",
      "zeek.ssh.remote_location_region",
      "zeek.ssh.server",
      "zeek.ssh.sshka",
      "zeek.ssh.version",
      "zeek.ssl.cert_chain_fps",
      "zeek.ssl.cert_chain_fuids",
      "zeek.ssl.cipher",
      "zeek.ssl.client_cert_chain_fps",
      "zeek.ssl.client_cert_chain_fuids",
      "zeek.ssl.client_issuer.C",
      "zeek.ssl.client_issuer.CN",
      "zeek.ssl.client_issuer.DC",
      "zeek.ssl.client_issuer.emailAddress",
      "zeek.ssl.client_issuer.GN",
      "zeek.ssl.client_issuer.initials",
      "zeek.ssl.client_issuer.L",
      "zeek.ssl.client_issuer.O",
      "zeek.ssl.client_issuer.OU",
      "zeek.ssl.client_issuer.pseudonym",
      "zeek.ssl.client_issuer.serialNumber",
      "zeek.ssl.client_issuer.SN",
      "zeek.ssl.client_issuer.ST",
      "zeek.ssl.client_issuer.title",
      "zeek.ssl.client_issuer_full",
      "zeek.ssl.client_subject.C",
      "zeek.ssl.client_subject.CN",
      "zeek.ssl.client_subject.emailAddress",
      "zeek.ssl.client_subject.GN",
      "zeek.ssl.client_subject.initials",
      "zeek.ssl.client_subject.L",
      "zeek.ssl.client_subject.O",
      "zeek.ssl.client_subject.OU",
      "zeek.ssl.client_subject.pseudonym",
      "zeek.ssl.client_subject.serialNumber",
      "zeek.ssl.client_subject.SN",
      "zeek.ssl.client_subject.ST",
      "zeek.ssl.client_subject.title",
      "zeek.ssl.client_subject_full",
      "zeek.ssl.curve",
      "zeek.ssl.established",
      "zeek.ssl.issuer.C",
      "zeek.ssl.issuer.CN",
      "zeek.ssl.issuer.DC",
      "zeek.ssl.issuer.emailAddress",
      "zeek.ssl.issuer.GN",
      "zeek.ssl.issuer.initials",
      "zeek.ssl.issuer.L",
      "zeek.ssl.issuer.O",
      "zeek.ssl.issuer.OU",
      "zeek.ssl.issuer.pseudonym",
      "zeek.ssl.issuer.serialNumber",
      "zeek.ssl.issuer.SN",
      "zeek.ssl.issuer.ST",
      "zeek.ssl.issuer.title",
      "zeek.ssl.issuer_full",
      "zeek.ssl.ja3",
      "zeek.ssl.ja3s",
      "zeek.ssl.last_alert",
      "zeek.ssl.next_protocol",
      "zeek.ssl.resumed",
      "zeek.ssl.server_name",
      "zeek.ssl.sni_matches_cert",
      "zeek.ssl.ssl_history",
      "zeek.ssl.ssl_version",
      "zeek.ssl.subject.C",
      "zeek.ssl.subject.CN",
      "zeek.ssl.subject.description",
      "zeek.ssl.subject.emailAddress",
      "zeek.ssl.subject.GN",
      "zeek.ssl.subject.initials",
      "zeek.ssl.subject.L",
      "zeek.ssl.subject.O",
      "zeek.ssl.subject.OU",
      "zeek.ssl.subject.postalCode",
      "zeek.ssl.subject.pseudonym",
      "zeek.ssl.subject.serialNumber",
      "zeek.ssl.subject.SN",
      "zeek.ssl.subject.ST",
      "zeek.ssl.subject.street",
      "zeek.ssl.subject.title",
      "zeek.ssl.subject_full",
      "zeek.ssl.validation_status",
      "zeek.stun.attr_type",
      "zeek.stun.attr_val",
      "zeek.stun.class",
      "zeek.stun.is_orig",
      "zeek.stun.method",
      "zeek.stun.trans_id",
      "zeek.stun_nat.is_orig",
      "zeek.stun_nat.lan_addr",
      "zeek.stun_nat.wan_addr",
      "zeek.stun_nat.wan_port",
      "zeek.syslog.facility",
      "zeek.syslog.message",
      "zeek.syslog.severity",
      "zeek.tds.command",
      "zeek.tds_rpc.parameters",
      "zeek.tds_rpc.procedure_name",
      "zeek.tds_sql_batch.header_type",
      "zeek.tds_sql_batch.query",
      "zeek.tftp.block_acked",
      "zeek.tftp.block_sent",
      "zeek.tftp.error_code",
      "zeek.tftp.error_msg",
      "zeek.tftp.fname",
      "zeek.tftp.mode",
      "zeek.tftp.size",
      "zeek.tftp.uid_data",
      "zeek.tftp.wrq",
      "zeek.ts",
      "zeek.tunnel.action",
      "zeek.tunnel.tunnel_type",
      "zeek.uid",
      "zeek.weird.addl",
      "zeek.weird.name",
      "zeek.weird.notice",
      "zeek.weird.peer",
      "zeek.wireguard.established",
      "zeek.wireguard.initiations",
      "zeek.wireguard.receiver_index",
      "zeek.wireguard.responses",
      "zeek.wireguard.sender_index",
      "zeek.x509.basic_constraints_ca",
      "zeek.x509.basic_constraints_path_len",
      "zeek.x509.certificate_curve",
      "zeek.x509.certificate_exponent",
      "zeek.x509.certificate_issuer.C",
      "zeek.x509.certificate_issuer.CN",
      "zeek.x509.certificate_issuer.DC",
      "zeek.x509.certificate_issuer.emailAddress",
      "zeek.x509.certificate_issuer.GN",
      "zeek.x509.certificate_issuer.initials",
      "zeek.x509.certificate_issuer.L",
      "zeek.x509.certificate_issuer.O",
      "zeek.x509.certificate_issuer.OU",
      "zeek.x509.certificate_issuer.pseudonym",
      "zeek.x509.certificate_issuer.serialNumber",
      "zeek.x509.certificate_issuer.SN",
      "zeek.x509.certificate_issuer.ST",
      "zeek.x509.certificate_issuer.title",
      "zeek.x509.certificate_issuer_full",
      "zeek.x509.certificate_key_alg",
      "zeek.x509.certificate_key_length",
      "zeek.x509.certificate_key_type",
      "zeek.x509.certificate_not_valid_after",
      "zeek.x509.certificate_not_valid_before",
      "zeek.x509.certificate_serial",
      "zeek.x509.certificate_sig_alg",
      "zeek.x509.certificate_subject.C",
      "zeek.x509.certificate_subject.CN",
      "zeek.x509.certificate_subject.DC",
      "zeek.x509.certificate_subject.description",
      "zeek.x509.certificate_subject.emailAddress",
      "zeek.x509.certificate_subject.GN",
      "zeek.x509.certificate_subject.initials",
      "zeek.x509.certificate_subject.L",
      "zeek.x509.certificate_subject.O",
      "zeek.x509.certificate_subject.OU",
      "zeek.x509.certificate_subject.postalCode",
      "zeek.x509.certificate_subject.pseudonym",
      "zeek.x509.certificate_subject.serialNumber",
      "zeek.x509.certificate_subject.SN",
      "zeek.x509.certificate_subject.ST",
      "zeek.x509.certificate_subject.street",
      "zeek.x509.certificate_subject.title",
      "zeek.x509.certificate_subject_full",
      "zeek.x509.certificate_version",
      "zeek.x509.client_cert",
      "zeek.x509.fingerprint",
      "zeek.x509.host_cert",
      "zeek.x509.san_dns",
      "zeek.x509.san_email",
      "zeek.x509.san_ip",
      "zeek.x509.san_uri"
    ];
    var allFieldsStr = allFields.join(',');

    // add URL link for assigned transport protocol numbers
    var protoFieldsStr = allFields.filter(value => /^(network\.transport|ip\.protocol)$/i.test(value)).join(',');
    this.api.addValueAction("malcolm_websearch_proto",  {name:"Protocol Registry", url:'https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml', fields:protoFieldsStr});

    // add right-click for searching IANA for services
    var serviceFieldsStr = allFields.filter(value => /^(protocols?|network\.protocol)$/i.test(value)).join(',');
    this.api.addValueAction("malcolm_websearch_service",  {name:"Service Registry", url:'https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=%TEXT%', fields:serviceFieldsStr});

    // add right-click for searching VirusTotal for other IP addresses
    var ipFieldsStr = allFields.filter(value => /[_\.-](h|ip)$/i.test(value)).join(',');
    this.api.addValueAction("malcolm_websearch_ip",  {name:"VirusTotal IP", url:"https://www.virustotal.com/en/ip-address/%TEXT%/information", fields:ipFieldsStr});

    // add right-click for searching IANA for ports
    var portFieldsStr = allFields.filter(value => /(^|src|dst|source|dest|destination|[\b_\.-])p(ort)?s?$/i.test(value)).join(',');
    this.api.addValueAction("malcolm_websearch_port",            {name:"Port Registry", url:'https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=%TEXT%', fields:portFieldsStr});
    this.api.addValueAction("malcolm_websearch_port_arkime",     {name:"Port Registry", url:'https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=%TEXT%', category:"port"});

    // add right-click for searching VirusTotal for hash signatures
    var hashFieldsStr = allFields.filter(value => /(^|[\b_\.-])(md5|sha(1|256|384|512))\b/i.test(value)).join(',');
    this.api.addValueAction("malcolm_vt_fields_hash",         {name:"VirusTotal Hash", url:"https://www.virustotal.com/gui/file/%TEXT%/detection", fields:hashFieldsStr});
    this.api.addValueAction("malcolm_vt_fields_hash_arkime",  {name:"VirusTotal Hash", url:"https://www.virustotal.com/gui/file/%TEXT%/detection", category:"md5"});

    // add right-click for searching the web for signature IDs
    var sigFieldsStr = allFields.filter(value => /(^|[\b_\.-])(hit|signature(_?id))?s?$/i.test(value)).join(',');
    this.api.addValueAction("malcolm_websearch_sig",  {name:"Web Search", url:'https://duckduckgo.com/?q="%TEXT%"', fields:sigFieldsStr});

    // add right-click for searching ARIN for ASN
    var asnFieldsStr = allFields.filter(value => /(as\.number|(src|dst)ASN|asn\.(src|dst))$/i.test(value)).join(',');
    this.api.addValueAction("malcolm_websearch_asn",  {name:"ARIN ASN", url:'https://search.arin.net/rdap/?query=%TEXT%&searchFilter=asn', fields:asnFieldsStr});

    // add right-click for searching mime/media/content types
    var mimeFieldsStr = allFields.filter(value => /mime[_\.-]?type/i.test(value)).join(',');
    this.api.addValueAction("malcolm_websearch_mime",  {name:"Media Type Registry", url:'https://www.iana.org/assignments/media-types/%TEXT%', fields:mimeFieldsStr});

    // add right-click for extracted/quarantined files from zeek
    var carvedFieldsStr = allFields.filter(value => /^zeek\.files\.extracted$/i.test(value)).join(',');
    this.api.addValueAction("malcolm_carved_file_quarantined",         {name:"Download (if quarantined)", url:"/dl-extracted-files/quarantine/%TEXT%", fields:carvedFieldsStr});
    this.api.addValueAction("malcolm_carved_file_preserved",           {name:"Download (if preserved)", url:"/dl-extracted-files/preserved/%TEXT%", fields:carvedFieldsStr});

    // add right-clicks for pivoting into dashboards from Arkime (see nginx.conf)
    var filterLabel = "OpenSearch Dashboards %DBFIELD%";
    var filterUrl = "idark2dash/filter?start=%ISOSTART%&stop=%ISOSTOP%&field=%DBFIELD%&value=%TEXT%";

    this.api.addValueAction("malcolm_dashboards_cat_ip",       {name:filterLabel, url:filterUrl, category:"ip"});
    this.api.addValueAction("malcolm_dashboards_cat_port",     {name:filterLabel, url:filterUrl, category:"port"});
    this.api.addValueAction("malcolm_dashboards_cat_country",  {name:filterLabel, url:filterUrl, category:"country"});
    this.api.addValueAction("malcolm_dashboards_cat_host",     {name:filterLabel, url:filterUrl, category:"host"});
    this.api.addValueAction("malcolm_dashboards_cat_md5",      {name:filterLabel, url:filterUrl, category:"md5"});
    this.api.addValueAction("malcolm_dashboards_cat_user",     {name:filterLabel, url:filterUrl, category:"user"});
    this.api.addValueAction("malcolm_dashboards_fields_zeek",  {name:filterLabel, url:filterUrl, fields:allFieldsStr});

    // add rick-click for opening malcolm agg api
    var apiLabel = "Aggregate %DBFIELD%";
    var apiURL = "mapi/agg/%DBFIELD%?from=%ISOSTART%&to=%ISOSTOP%";
    this.api.addValueAction("malcolm_mapi_cat_ip",       {name:apiLabel, url:apiURL, category:"ip"});
    this.api.addValueAction("malcolm_mapi_cat_port",     {name:apiLabel, url:apiURL, category:"port"});
    this.api.addValueAction("malcolm_mapi_cat_country",  {name:apiLabel, url:apiURL, category:"country"});
    this.api.addValueAction("malcolm_mapi_cat_host",     {name:apiLabel, url:apiURL, category:"host"});
    this.api.addValueAction("malcolm_mapi_cat_md5",      {name:apiLabel, url:apiURL, category:"md5"});
    this.api.addValueAction("malcolm_mapi_cat_user",     {name:apiLabel, url:apiURL, category:"user"});
    this.api.addValueAction("malcolm_mapi_fields_zeek",  {name:apiLabel, url:apiURL, fields:allFieldsStr});

    // add right-click for viewing original JSON document
    this.api.addValueAction("malcolm_json_source", {name:"%DBFIELD% Document(s) JSON", url:"mapi/document?filter={\"%DBFIELD%\":\"%TEXT%\"}", fields:"communityId,event.id,id,network.community_id,rootId,zeek.fuid,zeek.uid"});

    this.api.addView("malcolm_common",
      "if (session.malcolmDocId)\n" +

      // id information
      "  div.sessionDetailMeta.bold Malcolm Common Fields\n" +
      "  dl.sessionDetailMeta(suffix=\"IDs\")\n" +
      "    +arrayList(session.event, 'id', 'Log ID', 'event.id')\n" +
      "    +arrayList(session.network, 'community_id', 'Connection Community ID', 'network.community_id')\n" +
      "    +arrayList(session.event, 'provider', 'Data Source', 'event.provider')\n" +
      "    +arrayList(session.event, 'dataset', 'Log Type', 'event.dataset')\n" +
      "    +arrayList(session.host, 'name', 'Malcolm Node', 'host.name')\n" +

      // basic connection information
      "  dl.sessionDetailMeta(suffix=\"Basic Connection Info\")\n" +
      "    +arrayList(session.network, 'transport', 'Protocol', 'network.transport')\n" +
      "    +arrayList(session.network, 'protocol', 'Service', 'network.protocol')\n" +
      "    +arrayList(session.network, 'protocol_version', 'Service Version', 'network.protocol_version')\n" +
      "    +arrayList(session.event, 'action', 'Action', 'event.action')\n" +
      "    +arrayList(session.event, 'result', 'Result', 'event.result')\n" +
      "    +arrayList(session.source, 'ip', 'Originating Host', 'source.ip')\n" +
      "    +arrayList(session.source, 'port', 'Originating Port', 'source.port')\n" +
      "    +arrayList(session.source, 'mac', 'Originating MAC', 'source.mac')\n" +
      "    +arrayList(session.source, 'oui', 'Originating OUI', 'source.oui')\n" +
      "    +arrayList(session.source, 'hostname', 'Originating Host Name', 'source.hostname')\n" +
      "    +arrayList(session.source, 'ip_reverse_dns', 'Originating Host rDNS', 'source.ip_reverse_dns')\n" +
      "    +arrayList(session.source, 'segment', 'Originating Network Segment', 'source.segment')\n" +
      "    +arrayList(session.source.geo, 'country_name', 'Originating GeoIP Country', 'source.geo.country_name')\n" +
      "    +arrayList(session.source.geo, 'city_name', 'Originating GeoIP City', 'source.geo.city_name')\n" +
      "    +arrayList(session.destination, 'ip', 'Responding Host', 'destination.ip')\n" +
      "    +arrayList(session.destination, 'port', 'Responding Port', 'destination.port')\n" +
      "    +arrayList(session.destination, 'mac', 'Responding MAC', 'destination.mac')\n" +
      "    +arrayList(session.destination, 'oui', 'Responding OUI', 'destination.oui')\n" +
      "    +arrayList(session.destination, 'hostname', 'Responding Host Name', 'destination.hostname')\n" +
      "    +arrayList(session.destination, 'ip_reverse_dns', 'Responding Host rDNS', 'destination.ip_reverse_dns')\n" +
      "    +arrayList(session.destination, 'segment', 'Responding Network Segment', 'destination.segment')\n" +
      "    +arrayList(session.destination.geo, 'country_name', 'Responding GeoIP Country', 'destination.geo.country_name')\n" +
      "    +arrayList(session.destination.geo, 'city_name', 'Responding GeoIP City', 'destination.geo.city_name')\n" +
      "    +arrayList(session.related, 'ip', 'Related IP', 'related.ip')\n" +
      "    +arrayList(session.related, 'mac', 'Related MAC', 'related.mac')\n" +
      "    +arrayList(session.related, 'oui', 'Related OUI', 'related.oui')\n" +
      "    +arrayList(session.related, 'hosts', 'Related Host', 'related.hosts')\n" +
      "    +arrayList(session.related, 'user', 'User', 'related.user')\n" +
      "    +arrayList(session.related, 'password', 'Password', 'related.password')\n" +
      "    +arrayList(session.user_agent, 'original', 'User Agent', 'user_agent.original')\n" +
      "    +arrayList(session.event, 'freq_score_v1', 'Freq Score v1', 'event.freq_score_v1')\n" +
      "    +arrayList(session.event, 'freq_score_v2', 'Freq Score v2', 'event.freq_score_v2')\n" +
      "    +arrayList(session.event, 'severity', 'Severity', 'event.severity')\n" +
      "    +arrayList(session.event, 'risk_score', 'Risk Score', 'event.risk_score')\n" +
      "    +arrayList(session.event, 'severity_tags', 'Severity Tags', 'event.severity_tags')\n" +
      "    +arrayList(session.file, 'path', 'File Path', 'file.path')\n" +
      "    +arrayList(session.file, 'mime_type', 'File Magic', 'file.mime_type')\n" +
      "    +arrayList(session.related, 'hash', 'Related Hash', 'related.hash')\n" +

      // ####################################################################
      "  br\n");
  }
}

// ----------------------------------------------------------------------------
exports.initSource = function (api) {
  api.addSourceConfigDef('malcolm', {
    singleton: true,
    name: 'malcolm',
    description: 'Log fields for Arkime as part of Malcolm',
    link: 'https://github.com/idaholab/malcolm',
    types: [],
    cacheable: false,
    displayable: true,
    fields: []
  });

  return new MalcolmSource(api, 'malcolm');
};
