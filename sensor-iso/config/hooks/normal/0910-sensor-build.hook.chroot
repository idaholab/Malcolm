#!/bin/bash

# Copyright (c) 2020 Battelle Energy Alliance, LLC.  All rights reserved.

NETSNIFF_VER="0.6.8"
NETSNIFF_URL="https://github.com/netsniff-ng/netsniff-ng/archive/v$NETSNIFF_VER.tar.gz"

SPICY_DIR="/opt/spicy"
ZEEK_DIR="/opt/zeek"
ZEEK_VER="3.0.12"
ZEEK_URL="https://old.zeek.org/downloads/zeek-$ZEEK_VER.tar.gz"
ZEEK_PATCH_URLS=(
  # nothing here for now
)

BEATS_VER="7.6.2"
BEATS_OSS="-oss"
BEATS_DEB_URL_TEMPLATE_REPLACER="XXXXX"
BEATS_DEB_URL_TEMPLATE="https://artifacts.elastic.co/downloads/beats/$BEATS_DEB_URL_TEMPLATE_REPLACER/$BEATS_DEB_URL_TEMPLATE_REPLACER$BEATS_OSS-$BEATS_VER-amd64.deb"

CMAKE_DIR="/opt/cmake"
CMAKE_VER="3.19.3"
CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/cmake-${CMAKE_VER}-Linux-x86_64.tar.gz"

BISON_VER="3.7.4"
BISON_URL="https://ftp.gnu.org/gnu/bison/bison-${BISON_VER}.tar.gz"

YARA_VERSION="4.0.2"
YARA_URL="https://github.com/VirusTotal/yara/archive/v${YARA_VERSION}.tar.gz"
YARA_RULES_URL="https://codeload.github.com/Neo23x0/signature-base/tar.gz/master"
YARA_RULES_DIR="/opt/yara-rules"

CAPA_URL="https://github.com/fireeye/capa"
CAPA_RULES_DIR="/opt/capa-rules"

mkdir -p /opt/hedgehog_install_artifacts/

# some environment variables needed for build using clang
export CC="clang-11"
export CXX="clang++-11"
export ASM="clang-11"
export CCACHE_DIR="/var/spool/ccache"
export CCACHE_COMPRESS=1
export PATH="${ZEEK_DIR}"/bin:"${CMAKE_DIR}"/bin:$PATH

# download and install cmake (required for Spicy build)
mkdir -p "${CMAKE_DIR}"
curl -sSL "${CMAKE_URL}" | \
  tar xzf - -C "${CMAKE_DIR}" --strip-components 1

# download and install newer Bison (required for Spicy build)
cd /tmp
curl -sSL "${BISON_URL}" | tar xzf - -C /tmp
mv "./bison-${BISON_VER}" ./bison
cd ./bison
./configure --prefix=/usr
make
# make install
checkinstall -y -D --strip=yes --stripso=yes --install=yes --fstrans=no --pkgname="bison" --pkgversion="$BISON_VER" --pkgarch="amd64" --pkgsource="$BISON_URL"
rm -rf /tmp/bison*

# a moloch .deb is built and installed in a different context

# Install netsniff-ng
cd /tmp
curl -L -o netsniff-$NETSNIFF_VER.tar.gz "$NETSNIFF_URL"
tar -xzvf netsniff-$NETSNIFF_VER.tar.gz
cd netsniff-ng-$NETSNIFF_VER
./configure --prefix=/usr --disable-geoip
make netsniff-ng
# make netsniff-ng_install
checkinstall -y -D --strip=yes --stripso=yes --install=yes --fstrans=no --pkgname="netsniff-ng" --pkgversion="$NETSNIFF_VER" --pkgarch="amd64" --pkgsource="$NETSNIFF_URL" make netsniff-ng_install
cp *.deb /opt/hedgehog_install_artifacts/

cd ..
rm -Rf netsniff-$NETSNIFF_VER.tar.gz netsniff-ng-$NETSNIFF_VER
##

# Build and install zeek
mkdir -p /usr/local/src/zeek-patches
cd /usr/local/src/zeek-patches
for i in ${ZEEK_PATCH_URLS[@]}; do
  curl -L -J -O "$i"
done
cd /tmp
curl -L -o zeek-$ZEEK_VER.tar.gz "$ZEEK_URL"
tar -xvzf zeek-$ZEEK_VER.tar.gz
cd zeek-$ZEEK_VER
for i in /usr/local/src/zeek-patches/*; do
  patch -p 1 -r - --no-backup-if-mismatch < "$i" || true
done
./configure --prefix="${ZEEK_DIR}" --generator=Ninja --ccache --enable-perftools
cd build
ninja
# TODO: we were using checkinstall and I would prefer to, but it has some issues with clang++-11 not finding
# stdlib include files so for now i'm just back to ninja install. honestly that's probably fine
# because we weren't getting the third party plugins in the .deb anyway...
# checkinstall -y -D --strip=yes --stripso=yes --install=yes --fstrans=no --pkgname="zeek" --pkgversion="$ZEEK_VER" --pkgarch="amd64" --pkgsource="$ZEEK_URL" ninja install
ninja install

# install 3rd party Zeek plugins and scripts
zkg autoconfig
bash /usr/local/bin/zeek_install_plugins.sh
rm -Rf /root/.zkg /usr/local/src/*/.git

# strip for file size
file "${ZEEK_DIR}"/{lib,bin}/* \
     "${ZEEK_DIR}"/lib/zeek/plugins/packages/*/lib/* \
     "${ZEEK_DIR}"/lib/zeek/plugins/*/lib/* \
     "${SPICY_DIR}"/{lib,bin}/* \
     "${SPICY_DIR}"/lib/spicy/Zeek_Spicy/lib/* | grep 'ELF 64-bit' | sed 's/:.*//' | xargs -l -r strip -v --strip-unneeded

cat << 'EOF' >> "${ZEEK_DIR}"/etc/zeekctl.cfg
# all interfaces using lb_method=custom should use AF_PACKET
lb_custom.InterfacePrefix=af_packet::

EOF

# set up default zeek local policy
cp -f /usr/local/etc/zeek/*.zeek /opt/zeek/share/zeek/site/

# cleanup
cd /tmp
tar czf zeek-$ZEEK_VER-hedgehog.tar.gz -C /opt zeek spicy
mv ./zeek-$ZEEK_VER-hedgehog.tar.gz /opt/hedgehog_install_artifacts/
rm -Rf zeek-$ZEEK_VER*
###

# yara
mkdir -p usr/local/src
cd /usr/local/src

curl -sSL "${YARA_URL}" | tar xzf - -C /usr/local/src/
cd "./yara-${YARA_VERSION}"
./bootstrap.sh
./configure --prefix=/usr
  --with-crypto
  --enable-magic
  --enable-cuckoo
  --enable-dotnet
make
#make install
checkinstall -y -D --strip=yes --stripso=yes --install=yes --fstrans=no --pkgname="yara" --pkgversion="$YARA_VERSION" --pkgarch="amd64" --pkgsource="$YARA_URL"
cp *.deb /opt/hedgehog_install_artifacts/
cd /tmp
rm -rf /usr/local/src/yara*

mkdir -p ./Neo23x0
curl -sSL "$YARA_RULES_URL" | tar xzvf - -C ./Neo23x0 --strip-components 1
mkdir -p "${YARA_RULES_DIR}"/custom
cp ./Neo23x0/yara/* ./Neo23x0/vendor/yara/* "${YARA_RULES_DIR}"/
cp ./Neo23x0/LICENSE "${YARA_RULES_DIR}"/_LICENSE
rm -rf /tmp/Neo23x0

cd "${YARA_RULES_DIR}"/..
tar czf yara-rules-hedgehog.tar.gz "$(basename "${YARA_RULES_DIR}")"
mv ./yara-rules-hedgehog.tar.gz /opt/hedgehog_install_artifacts/
###

# capa (installed via pip) rules
cd /tmp
git clone --depth 1 --single-branch --branch "v$(/usr/local/bin/capa --version 2>&1 | awk '{print $2}')" "${CAPA_URL}" ./capa
cd ./capa
git submodule init rules
git submodule update --depth 1 rules
cd ../
rm -rf "${CAPA_RULES_DIR}"
mv ./capa/rules "${CAPA_RULES_DIR}"
rm -rf "${CAPA_RULES_DIR}"/.git* ./capa

cd "${CAPA_RULES_DIR}"/..
tar czf capa-rules-hedgehog.tar.gz "$(basename "${CAPA_RULES_DIR}")"
mv ./capa-rules-hedgehog.tar.gz /opt/hedgehog_install_artifacts/

# update clamav signatures
freshclam --stdout --quiet --no-warnings
###

# tweak some dashboards for, then install filebeat/metricbeat/auditbeat/packetbeat
for BEAT in filebeat metricbeat auditbeat packetbeat; do
  BEATS_URL="$(echo "$BEATS_DEB_URL_TEMPLATE" | sed "s/$BEATS_DEB_URL_TEMPLATE_REPLACER/$BEAT/g")"
  BEATS_DEB="$BEAT-$BEATS_VER-amd64.deb"
  BEATS_NEW_DEB="$BEAT-tweaked-$BEATS_VER-amd64.deb"
  BEATS_TMP_DIR="$BEAT-deb"
  pushd /tmp && \
    curl -f -L -o "$BEATS_DEB" "$BEATS_URL" && \
    dpkg-deb -x "$BEATS_DEB" "$BEATS_TMP_DIR" && \
    dpkg-deb -e "$BEATS_DEB" "$BEATS_TMP_DIR/DEBIAN" && \
    ( [[ "$BEAT" == "metricbeat" ]] && sed -i -e "s@ |\\\\\\\n\[Containers overview\](#/dashboard/CPU-slash-Memory-per-container)@@g" "$BEATS_TMP_DIR"/usr/share/$BEAT/kibana/?/dashboard/* || true ) && \
    pushd "$BEATS_TMP_DIR" && ( rm -f DEBIAN/md5sums && find . -type f ! -regex '.*.hg.*' ! -regex '.*?debian-binary.*' ! -regex '.*?DEBIAN.*' -print0 | xargs -l -0 md5sum >> DEBIAN/md5sums ) && popd && \
    dpkg-deb -b "$BEATS_TMP_DIR" "$BEATS_NEW_DEB" && \
    rm -rf "$BEATS_TMP_DIR" && \
    dpkg -i "$BEATS_NEW_DEB" && \
    cp "$BEATS_NEW_DEB" /opt/hedgehog_install_artifacts/ && \
    rm -rf "$BEATS_TMP_DIR" "$BEATS_DEB" "$BEATS_NEW_DEB" && \
    popd
done

# add symlinks to our custom dashboards
FILES=$(shopt -s nullglob dotglob; echo /usr/share/filebeat/kibana/7/dashboard-custom/*)
if (( ${#FILES} )) ; then
  ln -s -r -f /usr/share/filebeat/kibana/7/dashboard-custom/* /usr/share/filebeat/kibana/7/dashboard/
fi
FILES=$(shopt -s nullglob dotglob; echo /usr/share/metricbeat/kibana/7/dashboard-custom/*)
if (( ${#FILES} )) ; then
  ln -s -r -f /usr/share/metricbeat/kibana/7/dashboard-custom/* /usr/share/metricbeat/kibana/7/dashboard/
fi
FILES=$(shopt -s nullglob dotglob; echo /usr/share/auditbeat/kibana/7/dashboard-custom/*)
if (( ${#FILES} )) ; then
  ln -s -r -f /usr/share/auditbeat/kibana/7/dashboard-custom/* /usr/share/auditbeat/kibana/7/dashboard/
fi
FILES=$(shopt -s nullglob dotglob; echo /usr/share/packetbeat/kibana/7/dashboard-custom/*)
if (( ${#FILES} )) ; then
  ln -s -r -f /usr/share/packetbeat/kibana/7/dashboard-custom/* /usr/share/packetbeat/kibana/7/dashboard/
fi

###

# set up capabilities for network-related tools
chown root:netdev /usr/sbin/netsniff-ng && \
  setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip CAP_IPC_LOCK+eip CAP_SYS_ADMIN+eip' /usr/sbin/netsniff-ng
chown root:netdev "${ZEEK_DIR}"/bin/zeek && \
  setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip CAP_IPC_LOCK+eip' "${ZEEK_DIR}"/bin/zeek
chown root:netdev /sbin/ethtool && \
  setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /sbin/ethtool
chown root:netdev "${ZEEK_DIR}"/bin/capstats && \
  setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' "${ZEEK_DIR}"/bin/capstats
chown root:netdev /usr/sbin/tcpdump && \
  setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/sbin/tcpdump
chown root:netdev /usr/share/auditbeat/bin/auditbeat && \
  setcap 'CAP_AUDIT_READ+eip' /usr/share/auditbeat/bin/auditbeat
chown root:netdev /usr/share/packetbeat/bin/packetbeat && \
  setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/share/packetbeat/bin/packetbeat
chown root:netdev /opt/moloch/bin/moloch-capture && \
  setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip CAP_IPC_LOCK+eip' /opt/moloch/bin/moloch-capture

ln -s -f "${ZEEK_DIR}"/bin/zeek /usr/local/bin/
ln -s -f /usr/sbin/netsniff-ng /usr/local/bin/
ln -s -f /usr/sbin/tcpdump /usr/local/bin/
ln -s -f /opt/moloch/bin/moloch-capture /usr/local/bin/
ln -s -f /opt/moloch/bin/npm /usr/local/bin
ln -s -f /opt/moloch/bin/node /usr/local/bin
ln -s -f /opt/moloch/bin/npx /usr/local/bin
###

# zeekctl won't like being run by a non-root user unless the whole stupid thing is owned by the non-root user.
# as such, we're going to reset zeek to a "clean" state after each reboot. the config files will get
# regenerated when we are about to deploy zeek itself.
# so, now make a complete backup of /opt/zeek as it's going to have its ownership changed during runtime
rsync -a "${ZEEK_DIR}"/ "${ZEEK_DIR}".orig

# enable sensor init scripts

# run kiosk system process information daemon under systemd
if [ -f /opt/sensor/kiosk.service ]; then
  mv /opt/sensor/kiosk.service /etc/systemd/system/
  chown root:root /etc/systemd/system/kiosk.service
  chmod 644 /etc/systemd/system/kiosk.service
  systemctl daemon-reload
  systemctl enable kiosk
fi

# run resource logging services as unprivileged user.
# supervisor is run via /etc/rc.local  (vs. here with a @reboot directive)
#   so as to work for both live-usb and installed versions
#   (see 0900-setup-rc-local.hook.chroot)
if [ -d /opt/sensor/sensor_ctl/scripts ]; then
  cat << 'EOF' >> /etc/cron.d/sensor_ctl
SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

*/10 * * * * root /opt/sensor/sensor_ctl/scripts/log_temperature.sh
2 0 * * 0 root rm -f /var/lib/clamav/mirrors.dat
EOF
fi

###
